// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("DIRECT_URL")
}

model Book {
  id             String @id @default(cuid())
  title          String
  author         String
  genre          String
  description    String
  isbn           String
  pages          Int
  coverImageKey String @map("cover_image_key")
  seller         User   @relation(fields: [sellerId], references: [id])
  sellerId       String
  posts          Post[]

  @@map("books")
}

model Post {
  id           String        @id @default(cuid())
  title        String
  content      String?
  price        Int
  published    Boolean       @default(false)
  seller       User          @relation(fields: [sellerId], references: [id])
  sellerId     String
  book         Book          @relation(fields: [bookId], references: [id])
  bookId       String        @map("book_id")
  transactions Transaction[]

  @@map("posts")
}

model User {
  id               String        @id @default(cuid())
  name             String
  email            String        @unique
  password         String // Hash?
  createdAt        DateTime      @default(now())
  buyTransactions  Transaction[] @relation("BuyerTransaction")
  sellTransactions Transaction[] @relation("SellerTransaction")
  Book             Book[]
  Post             Post[]

  @@map("users")
}

model Transaction {
  id             String            @id @default(cuid())
  // transaction data
  buyer          User              @relation("BuyerTransaction", fields: [buyerId], references: [id])
  buyerId        String            @map("buyer_id")
  seller         User              @relation("SellerTransaction", fields: [sellerId], references: [id])
  sellerId       String            @map("seller_id")
  post           Post              @relation(fields: [postId], references: [id])
  postId         String            @map("post_id")
  createOn       DateTime          @default(now()) @map("create_on")
  updateOn       DateTime          @updatedAt() @map("update_on")
  status         TransactionStatus
  failData       TransactionFail?
  // payment data
  paymentMethod  PaymentMethod
  hashId         String            @map("hashId")
  paidOn         DateTime          @default(now()) @map("paid_on")
  amount         Int
  // shipment data
  shipmentMethod ShipmentMethod
  trackingURL    String            @map("tracking_url")
  isDelivered    Boolean           @map("is_delivered")

  @@index([buyerId, createOn])
  @@index([sellerId, createOn])
  @@map("transactions")
}

model TransactionFail {
  id            String              @id @default(cuid())
  transaction   Transaction         @relation(fields: [transactionId], references: [id])
  transactionId String              @unique @map("transaction_id")
  evidenceURL   String              @map("evidence_url")
  detail        String
  failType      TransactionFailType @map("fail_type")

  @@map("transaction_fails")
}

enum TransactionStatus {
  APPROVING @map("approving")
  PAYING    @map("paying")
  VERIFYING @map("verifying")
  COMPLETE  @map("complete")
  FAIL      @map("fail")
}

enum TransactionFailType {
  CHEAT @map("cheat")
}

enum PaymentMethod {
  CREDIT_CARD    @map("credit_card")
  ONLINE_BANKING @map("online_banking")
}

enum ShipmentMethod {
  DELIVERY @map("delivery")
}
