// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  firstName        String         @map("first_name")
  lastName         String         @map("last_name")
  password         String
  phoneNumber      String?        @unique @map("phone_number")
  address          String?
  isAdmin          Boolean        @default(false) @map("is_admin")
  isSeller         Boolean        @default(false) @map("is_seller")
  isVerified       Boolean        @default(false) @map("is_verified")
  emailVerified    DateTime?      @map("email_verified")
  phoneVerified    DateTime?      @map("phone_verified")
  pdpaConsent      Boolean        @default(false) @map("pdpa_consent")
  buyTransactions  Transaction[]  @relation("BuyerTransaction")
  sellTransactions Transaction[]  @relation("SellerTransaction")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  sellerProfile    SellerProfile?
  posts            Post[]
  chatMessages     ChatMessage[]
  Bookmark         Bookmark[]
  ChatReport       ChatReport[]

  @@map("users")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  type      String // 'email' or 'phone'
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([email, type])
  @@map("verification_tokens")
}

model SellerProfile {
  id             String    @id @default(cuid())
  idCardNumber   String    @map("id_card_number")
  idCardImageKey String    @map("id_card_image_key")
  bankAccount    String    @map("bank_account")
  bankName       String    @map("bank_name")
  isApproved     Boolean   @default(false) @map("is_approved")
  approvedAt     DateTime? @map("approved_at")
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @unique @map("user_id")

  @@map("seller_profiles")
}

model Book {
  id            String        @id @default(cuid())
  title         String
  author        String
  genre         String
  description   String
  isbn          String        @unique
  pages         Int
  publisher     String
  coverImageKey String        @map("cover_image_key")
  posts         Post[]
  bookGenres    GenreType[]
  bookTags      BookTagType[]
  // TODO verifiedBy Admin
  // Also get rid of genre, already have GenreType as enum

  @@map("books")
}

model Post {
  id                  String                   @id @default(cuid())
  title               String
  content             String?
  price               Int
  published           Boolean                  @default(false)
  seller              User                     @relation(fields: [sellerId], references: [id])
  sellerId            String                   @map("seller_id")
  book                Book                     @relation(fields: [bookId], references: [id])
  bookId              String                   @map("book_id")
  transactions        Transaction[]
  ChatRoom            ChatRoom[]
  Bookmark            Bookmark[]
  specialDescriptions SpecialDescriptionType[]
  damageURLs          String[]

  @@map("posts")
}

model Bookmark {
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, postId])
  @@index([userId])
  @@map("bookmarks")
}

model ChatMessage {
  id        String   @id @default(cuid())
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String   @map("sender_id")
  room      ChatRoom @relation(fields: [roomId], references: [id])
  roomId    String   @map("room_id")
  message   String
  createdAt DateTime @default(now()) @map("created_at")

  @@index([roomId])
  @@map("chat_messages")
}

model ChatRoom {
  id         String        @id @default(cuid())
  post       Post          @relation(fields: [postId], references: [id])
  postId     String        @map("post_id")
  // TODO: add report
  userIds    String[]      @map("user_ids")
  createdAt  DateTime      @default(now()) @map("created_at")
  lastReadA  DateTime      @default(now()) @map("last_read_a")
  lastReadB  DateTime      @default(now()) @map("last_read_b")
  messages   ChatMessage[]
  chatReport ChatReport[]

  @@index([postId])
  @@map("chat_rooms")
}

model ChatReport {
  id         String   @id @default(cuid())
  reporter   User     @relation(fields: [reporterId], references: [id])
  reporterId String   @map("reporter_id")
  room       ChatRoom @relation(fields: [roomId], references: [id])
  roomId     String   @map("room_id")
  reason     String
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("chat_reports")
}

model Transaction {
  id             String            @id @default(cuid())
  // transaction data
  buyer          User              @relation("BuyerTransaction", fields: [buyerId], references: [id])
  buyerId        String            @map("buyer_id")
  seller         User              @relation("SellerTransaction", fields: [sellerId], references: [id])
  sellerId       String            @map("seller_id")
  post           Post              @relation(fields: [postId], references: [id])
  postId         String            @map("post_id")
  createdAt      DateTime          @default(now()) @map("create_on")
  updatedAt      DateTime          @updatedAt() @map("update_on")
  status         TransactionStatus
  failData       TransactionFail?
  // payment data
  paymentMethod  PaymentMethod     @map("payment_method")
  hashId         String            @map("hashId")
  paidOn         DateTime          @default(now()) @map("paid_on")
  amount         Int
  // shipment data
  shipmentMethod ShipmentMethod    @map("shipment_method")
  address        String            @map("address")
  trackingURL    String            @map("tracking_url")
  trackingNumber String            @map("tracking_number")
  isDelivered    Boolean           @map("is_delivered")
  // review
  review         Review?

  @@index([buyerId, createdAt])
  @@index([sellerId, createdAt])
  @@map("transactions")
}

model TransactionFail {
  id            String              @id @default(cuid())
  transaction   Transaction         @relation(fields: [transactionId], references: [id])
  transactionId String              @unique @map("transaction_id")
  evidenceURL   String              @map("evidence_url")
  detail        String
  failType      TransactionFailType @map("fail_type")

  @@map("transaction_fails")
}

model Review {
  id            String      @id @default(cuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique @map("transaction_id")
  rating        Int         @default(0) // 1-5 star rating
  comment       String?
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@index([transactionId])
  @@map("reviews")
}

model Cart {
  userId String @id
  postId String
}

enum TransactionStatus {
  PACKING    @map("packing")
  DELIVERING @map("delivering")
  COMPLETE   @map("complete")
  HOLD       @map("hold")
  FAIL       @map("fail")

  @@map("transaction_status_type")
}

enum TransactionFailType {
  UNDELIVERED @map("undelivered")
  UNQUALIFIED @map("unqualified")
  REJECT      @map("reject")
  TERMINATION @map("termination")
  OTHER       @map("other")
  UNDEFINED   @map("undefined")

  @@map("transaction_fail_type")
}

enum PaymentMethod {
  CREDIT_CARD    @map("credit_card")
  ONLINE_BANKING @map("online_banking")
  UNDEFINED      @map("undefined")

  @@map("payment_method_type")
}

enum ShipmentMethod {
  STANDARD  @map("standard")
  EXPRESS   @map("express")
  UNDEFINED @map("undefined")

  @@map("shipment_method_type")
}

// model SpecialDescription {
//   postId      String
//   specialType SpecialDescriptionType
//   post        Post                   @relation(fields: [postId], references: [id])

//   @@id([postId, specialType])
//   @@map("special_descriptions")
// }

enum SpecialDescriptionType {
  AUTHOR_SIGNATURE            @map("author_signature")
  LIMITED_EDITION             @map("limited_edition")
  FIRST_EDITION               @map("first_edition")
  SPECIAL_COVER_ART           @map("special_cover_art")
  ILLUSTRATED_EDITION         @map("illustrated_edition")
  COLLECTORS_EDITION          @map("collectors_edition")
  SLIPCASE_EDITION            @map("slipcase_edition")
  LEATHER_BOUND               @map("leather_bound")
  GILDED_EDGES                @map("gilded_edges")
  DECKLE_EDGES                @map("deckle_edges")
  POP_UP_ELEMENTS             @map("pop_up_elements")
  FOLD_OUT_PAGES              @map("fold_out_pages")
  HANDWRITTEN_NOTES_BY_AUTHOR @map("handwritten_notes_by_author")
  PERSONALIZED_MESSAGE        @map("personalized_message")
  NUMBERED_EDITION            @map("numbered_edition")
  EXCLUSIVE_ARTWORK           @map("exclusive_artwork")
  EMBOSSED_COVER              @map("embossed_cover")
  GOLD_FOIL_STAMPING          @map("gold_foil_stamping")
  BOX_SET                     @map("box_set")
  ANNIVERSARY_EDITION         @map("anniversary_edition")
  HARDCOVER_WITH_DUST_JACKET  @map("hardcover_with_dust_jacket")
  TRANSPARENT_COVER           @map("transparent_cover")
  ANNOTATED_EDITION           @map("annotated_edition")
  SIGNED_BY_ILLUSTRATOR       @map("signed_by_illustrator")
  MAP_INSERT                  @map("map_insert")
  SUPPLEMENTARY_MATERIALS     @map("supplementary_materials")
  EXCLUSIVE_CONTENT           @map("exclusive_content")
  FAN_ART_EDITION             @map("fan_art_edition")
  INTERACTIVE_ELEMENTS        @map("interactive_elements")
  BILINGUAL_EDITION           @map("bilingual_edition")
}

// model Damage {
//   postId           String
//   damagePictureURL String @map("damage_picture_url")
//   post             Post   @relation(fields: [postId], references: [id])

//   @@id([postId, damagePictureURL])
//   @@map("damages")
// }

// model Genre {
//   bookId    String
//   genreType GenreType
//   book      Book      @relation(fields: [bookId], references: [id])

//   @@id([bookId, genreType])
//   @@map("book_genres")
// }

enum GenreType {
  FICTION               @map("fiction")
  NON_FICTION           @map("non_fiction")
  MYSTERY               @map("mystery")
  THRILLER              @map("thriller")
  ROMANCE               @map("romance")
  SCIENCE_FICTION       @map("science_fiction")
  FANTASY               @map("fantasy")
  HISTORICAL_FICTION    @map("historical_fiction")
  HORROR                @map("horror")
  BIOGRAPHY             @map("biography")
  MEMOIR                @map("memoir")
  SELF_HELP             @map("self_help")
  HEALTH_WELLNESS       @map("health_wellness")
  PSYCHOLOGY            @map("psychology")
  POETRY                @map("poetry")
  DRAMA                 @map("drama")
  ADVENTURE             @map("adventure")
  CHILDRENS_LITERATURE  @map("childrens_literature")
  YOUNG_ADULT           @map("young_adult")
  GRAPHIC_NOVELS_COMICS @map("graphic_novels_comics")
  CRIME                 @map("crime")
  TRUE_CRIME            @map("true_crime")
  DYSTOPIAN             @map("dystopian")
  CONTEMPORARY          @map("contemporary")
  RELIGIOUS_SPIRITUAL   @map("religious_spiritual")
}

// model BookTag {
//   bookId  String
//   tagType BookTagType
//   book    Book        @relation(fields: [bookId], references: [id])

//   @@id([bookId, tagType])
//   @@map("book_tags")
// }

enum BookTagType {
  BESTSELLER         @map("bestseller")
  NEW_RELEASE        @map("new_release")
  CLASSIC            @map("classic")
  AWARD_WINNING      @map("award_winning")
  MUST_READ          @map("must_read")
  HIGHLY_RECOMMENDED @map("highly_recommended")
  INSPIRATIONAL      @map("inspirational")
  COMING_OF_AGE      @map("coming_of_age")
  FAMILY_SAGA        @map("family_saga")
  HISTORICAL         @map("historical")
  DARK_FANTASY       @map("dark_fantasy")
  DETECTIVE          @map("detective")
  LGBTQ_PLUS         @map("lgbtq_plus")
  YOUNG_ADULT        @map("young_adult")
  CHILDRENS_BOOK     @map("childrens_book")
  SHORT_STORIES      @map("short_stories")
  MYSTERY            @map("mystery")
  SELF_HELP          @map("self_help")
  THRILLER           @map("thriller")
  ROMANTIC_COMEDY    @map("romantic_comedy")
}
